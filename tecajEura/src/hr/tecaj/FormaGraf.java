
package hr.tecaj;

import java.awt.BasicStroke;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author damir
 */
public class FormaGraf extends javax.swing.JFrame {
    private JFreeChart graf;
    ChartPanel panel;

    /** Creates new form Graf */
    public FormaGraf() {
        initComponents();
        inicijalizacija();
        kreirajGraf();
        setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        panelZaGraf = new javax.swing.JPanel();
        jcbValute = new javax.swing.JComboBox();
        jcbGraf = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Graf");

        panelZaGraf.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelZaGraf.setLayout(new javax.swing.BoxLayout(panelZaGraf, javax.swing.BoxLayout.LINE_AXIS));

        jcbValute.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jcbValute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbValuteActionPerformed(evt);
            }
        });

        jcbGraf.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jcbGraf.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1 Teèaj kroz godine", "2 Teèaj unutar godina po mjesecima" }));
        jcbGraf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbGrafActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jcbValute, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbGraf, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(613, Short.MAX_VALUE))
            .addComponent(panelZaGraf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbGraf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbValute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelZaGraf, javax.swing.GroupLayout.DEFAULT_SIZE, 729, Short.MAX_VALUE))
        );

        pack();
    }//GEN-END:initComponents

    private void jcbGrafActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbGrafActionPerformed
        kreirajGraf();       
    }//GEN-LAST:event_jcbGrafActionPerformed

    private void jcbValuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbValuteActionPerformed
        // TODO add your handling code here:
        kreirajGraf();
    }//GEN-LAST:event_jcbValuteActionPerformed

    private void inicijalizacija() {
        Pomocna.instalirajValuteuCombo(jcbValute);
    }


    private void kreirajGraf() {
        /*
         * 1 Teèaj kroz godine, 2 Teèaj unutar godina po mjesecima
         */
        String valuta = jcbValute.getSelectedItem().toString().trim();
        String tipGrafa = jcbGraf.getSelectedItem().toString().substring(0, 1);
        NumberAxis yOs = getYOs(valuta);
        DefaultCategoryDataset podaci = null;
        XYSeriesCollection podaciXYLista = null;
        CategoryPlot plot = null;
        XYPlot xyPlot = null;
        ResultSet rs = null;
        if (tipGrafa.equals("1")) {
            podaci = new DefaultCategoryDataset();
            rs = Pomocna.tecajValuteKrozGodine(valuta);
            try {
                while (rs.next()) {
                    podaci.addValue(rs.getDouble("min_tecaj"), "Teèaj", Integer.toString(rs.getInt("godina")));
                }
                rs.close();
            } catch (SQLException e) {
                Pomocna.porukaError(null, e.getMessage());
            }

            graf =
                ChartFactory.createLineChart3D("Teèaj " + valuta + " kroz godine", "Godina", "Teèaj", podaci,
                                               PlotOrientation.VERTICAL, true, true, false);
          
            plot = (CategoryPlot) graf.getPlot();

            plot.setRangeAxis(yOs);
        }

        else if (tipGrafa.equals("2")) {
            XYSeries podaciXY = null;
            podaciXYLista = new XYSeriesCollection();
            int godina = 0;
            rs = Pomocna.tecajValuteKrozGodineIMjesece(valuta);

            try {
                while (rs.next()) {
                    if (godina == 0) {
                        godina = rs.getInt("godina");
                        podaciXY = new XYSeries(Integer.toString(godina));
                    }
                    if (godina != rs.getInt("godina")) {
                        podaciXYLista.addSeries(podaciXY);
                        godina = rs.getInt("godina");
                        podaciXY = new XYSeries(Integer.toString(godina));
                    }
                    podaciXY.add(rs.getDouble("mjesec"), rs.getDouble("tecaj"));
                }
                rs.close();
                podaciXYLista.addSeries(podaciXY);
            } catch (SQLException e) {
                Pomocna.porukaError(null, e.getMessage());
            }
            graf =
                ChartFactory.createXYLineChart("Teèaj unutar godina po mjesecima", "Mjesec", "Teèaj", podaciXYLista,
                                               PlotOrientation.VERTICAL, true, true, false);
            xyPlot = (XYPlot) graf.getPlot();
            xyPlot.setRangeAxis(yOs);
            xyPlot.setDomainCrosshairVisible(true);
            xyPlot.setRangeCrosshairVisible(true);

            //X OS postavke
            NumberAxis xOs = new NumberAxis("X-Axis");
            xOs.setRange(1, 12);
            xOs.setTickUnit(new NumberTickUnit(1));
            xOs.setLabel("Mjesec");
            xyPlot.setDomainAxis(xOs);

            // Debljina linije
            int brojSerija = xyPlot.getSeriesCount();
            for (int i = 0; i < brojSerija; i++) {
                xyPlot.getRenderer().setSeriesStroke(i, new BasicStroke(2f));
            }

            panel = new ChartPanel(graf);
            panelZaGraf.add(panel);

        }

        panel = new ChartPanel(graf);
        panelZaGraf.removeAll();
        panelZaGraf.add(panel);
        panelZaGraf.validate();
        panelZaGraf.repaint();
    }

    private NumberAxis getYOs(String valuta) {
        NumberAxis yOs = new NumberAxis("Y-Axis");
        TecajMinMax tecajMinMax = Pomocna.getMinMaxTecajValute(valuta);
        yOs.setRange(tecajMinMax.getMin(), tecajMinMax.getMax());
        yOs.setTickUnit(new NumberTickUnit(0.10));
        yOs.setLabel("Teèaj");
        return yOs;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jcbGraf;
    private javax.swing.JComboBox jcbValute;
    private javax.swing.JPanel panelZaGraf;
    // End of variables declaration//GEN-END:variables

}
